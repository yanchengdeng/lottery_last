alias: zgxyzx
pass:   zgxyzx2017





 MaterialDialog.Builder builder = new MaterialDialog.Builder(this)
                .title("")
                .content("退出本次编辑？")
                .positiveText("确定").positiveColor(getResources().getColor(R.color.color_blue)).onPositive(new MaterialDialog.SingleButtonCallback() {
                    @Override
                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                        dialog.dismiss();
                        finish();
                    }
                }).negativeText("取消").negativeColor(getResources().getColor(R.color.color_info)).onNegative(new MaterialDialog.SingleButtonCallback() {
                    @Override
                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                        dialog.dismiss();
                    }
                });

        MaterialDialog dialog = builder.build();
        dialog.show();




noDateView = getLayoutInflater().inflate(R.layout.layour_listview_empty, (ViewGroup) recycle.getParent(), false);

 //设置为空
   adapter.setNewData(null);
   adapter.setEmptyView(noDateView);


     HashMap<String, String> data = new HashMap<>();
            data.put("", );
            OkGo.<CollegeResponse<UserInfo>>post(Constants.Net)//
                    .cacheMode(CacheMode.NO_CACHE)
                    .params(LoginUtils.getParams(data))
                    .execute(new NewsCallback<CollegeResponse<UserInfo>>() {
                        @Override
                        public void onSuccess(Response<CollegeResponse<UserInfo>> response) {

                        }

                        @Override
                        public void onError(Response  response) {
                             SystemUtils.showShort(LoginUtils.toastInfo(response,page));
                        }
                    });



 @Subscribe(threadMode = ThreadMode.MAIN)
    public void onMessageEvent(RegisterSuccessEvent event) {
        finish();
    }


    <android.support.v4.widget.SwipeRefreshLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/swipeLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <android.support.v7.widget.RecyclerView
            android:id="@+id/recycle"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

    </android.support.v4.widget.SwipeRefreshLayout>






    //多个权限

        private boolean mPermission = false;


         mPermission = checkPublishPermission();

      private boolean requestVideo(Activity activity){
            if (afterM()){
                final List<String> permissionsList = new ArrayList<>();
                if ((activity.checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)) permissionsList.add(Manifest.permission.CAMERA);
                if ((activity.checkSelfPermission(Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED)) permissionsList.add(Manifest.permission.RECORD_AUDIO);
                if (permissionsList.size() != 0){
                    activity.requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                            REQUEST_CODE_ASK_PERMISSIONS);
                    return false;
                }
                int hasPermission = activity.checkSelfPermission(Manifest.permission.CAMERA);
                if (hasPermission != PackageManager.PERMISSION_GRANTED) {
                    activity.requestPermissions(new String[]{Manifest.permission.CAMERA},
                            REQUEST_CODE_ASK_PERMISSIONS);
                    return false;
                }
            }
            return true;
        }


         @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                switch (requestCode) {
                    case WRITE_PERMISSION_REQ_CODE:
                        for (int ret : grantResults) {
                            if (ret != PackageManager.PERMISSION_GRANTED) {
                                return;
                            }
                        }
                        mPermission = true;
                        if (mPermission) {
                            startLocation();
                        }
                        break;
                    default:
                        break;
                }
            }


    //单个权限
        private boolean requestCamera(Activity activity){
            if (afterM()){
                int hasPermission = activity.checkSelfPermission(Manifest.permission.CAMERA);
                if (hasPermission != PackageManager.PERMISSION_GRANTED) {
                    activity.requestPermissions(new String[]{Manifest.permission.CAMERA},
                            REQUEST_CODE_ASK_PERMISSIONS);
                    return false;
                }
            }
            return true;
        }